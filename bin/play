#!/usr/bin/python
#-----------------------------------------------------------------------
#
# $Id: play,v 1.3 2007/06/05 18:23:22 samuel Exp $
#
# Usage:
#
#   play [ DIR | FILE | REGEX ] ...
#
#-----------------------------------------------------------------------

import os
import re
import sys

#-----------------------------------------------------------------------
# Configuration
#-----------------------------------------------------------------------

# Path and arguments to program to play mp3 files.
madplay = ("/usr/bin/madplay", "-q")

# Shell script pattern to play flac files.
flacplay = "/usr/bin/flac -scd \"%s\" | sox -q -t wav - -t ossdsp /dev/audio"

# Directory containing music files.
music_dir = "/home/samuel/music"

#-----------------------------------------------------------------------
# Support for regex matching (experimental)
#-----------------------------------------------------------------------

def get_dir_cache():
    try:
        return get_dir_cache.cache
    except AttributeError:
        dir_cache_file_name = os.path.join(music_dir, "list.dirs")
        get_dir_cache.cache = [ os.path.join(music_dir, l.strip())
                                for l in file(dir_cache_file_name) ]
        return get_dir_cache.cache


def get_file_cache():
    try:
        return get_file_cache.cache
    except AttributeError:
        file_cache_file_name = os.path.join(music_dir, "list.files")
        get_file_cache.cache = [ os.path.join(music_dir, l.strip())
                                 for l in file(file_cache_file_name) ]
        return get_file_cache.cache


def match_name(name):
    regex = re.compile(name)

    dirs = [ d for d in get_dir_cache() if regex.search(d) is not None ]
    if len(dirs) > 0:
        return dirs

    files = [ f for f in get_file_cache() if regex.search(f) is not None ]
    if len(files) > 0:
        return files

    return []


#-----------------------------------------------------------------------
# Exception classes
#-----------------------------------------------------------------------

class UnknownFileTypeError(RuntimeError):

    def __init__(self, file_name):
        RuntimeError.__init__(
            self, "unknown file type for \"%s\"" % (file_name, ))



class UnknownNameError(RuntimeError):

    def __init__(self, name):
        RuntimeError.__init__(self, "unknown name \"%s\"" % (name, ))



#-----------------------------------------------------------------------
# Functions
#-----------------------------------------------------------------------

def play_mp3(file_name):
    status = os.spawnl(os.P_WAIT, madplay[0], *(madplay + (file_name, )))
    if status != 0:
        raise RuntimeError(
            "exit status playing \"%s\": %d" % (file_name, status, ))


def play_flac(file_name):
    status = os.system(flacplay % (file_name, ))
    if status != 0:
        raise RuntimeError(
            "exit status playing \"%s\": %d" % (file_name, status, ))


play_functions = {
    "mp3": play_mp3,
    "flac": play_flac,
    }


def play_file(file_name):
    extension = os.path.splitext(file_name)[1].lstrip(".")
    try:
        play_fn = play_functions[extension]
    except KeyError:
        raise UnknownFileTypeError(file_name)

    print os.path.basename(file_name)
    play_fn(file_name)


def play_dir(dir):
    print os.path.basename(dir)
    for file_name in sorted(os.listdir(dir)):
        try:
            play_file(os.path.join(dir, file_name))
        except UnknownFileTypeError:
            pass
        

def play(name):
    if os.path.isdir(name):
        play_dir(name)
    elif os.path.isfile(name):
        play_file(name)
    else:
        matches = match_name(name)
        if len(matches) > 0:
            for name in matches:
                play(name)
        else:
            raise UnknownNameError(name)


#-----------------------------------------------------------------------
# Main script
#-----------------------------------------------------------------------

# FIXME: Add support for command line options.

if __name__ == "__main__":
    try:
        for name in sys.argv[1 :]:
            play(name)
    except RuntimeError, error:
        print error
        sys.exit(1)
    except KeyboardInterrupt:
        pass


#-----------------------------------------------------------------------

